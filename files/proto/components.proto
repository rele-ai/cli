syntax = "proto3";

package components;

option go_package = "github.com/rele-ai/rb/src/integrations-gw/internal/components";
import "google/protobuf/struct.proto";

// ------------ Users Service -------------
service Users {
  // list components of type x
  rpc List(ListUserRequest) returns (ListUserResponse);

  // get component of type x by id
  rpc Get(GetUserRequest) returns (GetUserResponse);

  // update component of type x via id and data
  rpc Update(UpdateRequest) returns (UpdateUserResponse);

  // delete component of type x by id
  rpc Delete(DeleteUserRequest) returns (DeleteUserResponse);

  // create new component of type x
  rpc Create(CreateUserRequest) returns (CreateUserResponse);

  // remove integration
  rpc RemoveIntegration(RemoveIntegrationRequest) returns (RemoveIntegrationResponse);

  // update webhooks array
  rpc UpdateWebhooksArray(UpdateWebhooksArrayRequest) returns (ObjectId);

  // delete user with fb-auth
  rpc DeleteUserWithAuth(DeleteUserWithAuthRequest) returns (DeleteUserWithAuthResponse);
}

// ------------ Orgs Service -------------
service Orgs {
  // list components of type x
  rpc List(ListOrgRequest) returns (ListOrgResponse);

  // get component of type x by id
  rpc Get(GetOrgRequest) returns (GetOrgResponse);

  // update component of type x via id and data
  rpc Update(UpdateRequest) returns (UpdateOrgResponse);

  // delete component of type x by id
  rpc Delete(DeleteOrgRequest) returns (DeleteOrgResponse);

  // create new component of type x
  rpc Create(CreateOrgRequest) returns (CreateOrgResponse);

  // remove integration
  rpc RemoveSubscription(RemoveSubscriptionRequest) returns (RemoveSubscriptionResponse);

  // update webhooks array
  rpc UpdateWebhooksArray(UpdateWebhooksArrayRequest) returns (ObjectId);

  // delete company from rele.ai, includes all users and authentications
  rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse);
}

// ------------ Webhooks Service -------------
service Webhooks {
  // list of webhooks
  rpc List (ListWebhookRequest) returns (ListWebhookResponse);

  // get webhook by id
  rpc Get(GetWebhookRequest) returns (GetWebhookResponse);

  // update webhook by id
  rpc Update(UpdateRequest) returns (UpdateWebhookResponse);

  // delete webhook by id
  rpc Delete(DeleteWebhookRequest) returns (DeleteWebhookResponse);

  // create webhook
  rpc Create(CreateWebhookRequest) returns (CreateWebhookResponse);
}

// ------------ Triggers Service -------------
service Triggers {
  // list of triggers
  rpc List (ListTriggerRequest) returns (ListTriggerResponse) {}

  // get trigger by id
  rpc Get (GetTriggerRequest) returns (GetTriggerResponse) {}

  // update trigger by id
  rpc Update (UpdateRequest) returns (UpdateTriggerResponse) {}

  // delete trigger by id
  rpc Delete (DeleteTriggerRequest) returns (DeleteTriggerResponse) {}

  // create trugger by id
  rpc Create (CreateTriggerRequest) returns (CreateTriggerResponse) {}
}

// ------------ Apps Service -------------
service Apps {
  // list of apps
  rpc List (ListAppRequest) returns (ListAppResponse) {}

  // get App by id
  rpc Get (GetAppRequest) returns (GetAppResponse) {}

  // update App by id
  rpc Update (UpdateRequest) returns (UpdateAppResponse) {}

  // delete App by id
  rpc Delete (DeleteAppRequest) returns (DeleteAppResponse) {}

  // create app by id
  rpc Create (CreateAppRequest) returns (CreateAppResponse) {}

  // load app keys
  rpc LoadAppKeys(LoadAppKeysRequest) returns (stream LoadAppKeysResponse) {}
}

// ------------ Operations Service -------------
service Operations {
  // list of operations
  rpc List (ListOperationRequest) returns (ListOperationResponse) {}

  // get Operation by id
  rpc Get (GetOperationRequest) returns (GetOperationResponse) {}

  // update Operation by id
  rpc Update (UpdateRequest) returns (UpdateOperationResponse) {}

  // delete Operation by id
  rpc Delete (DeleteOperationRequest) returns (DeleteOperationResponse) {}

  // create trugger by id
  rpc Create (CreateOperationRequest) returns (CreateOperationResponse) {}

  // create operations endpoint
  rpc CreateRecords (CreateOperationsRequest) returns (CreateOperationsResponse) {}
}

// ------------ Workflows Service -------------
service Workflows {
  // list of Workflows
  rpc List (ListWorkflowRequest) returns (ListWorkflowResponse) {}

  // get Workflow by id
  rpc Get (GetWorkflowRequest) returns (GetWorkflowResponse) {}

  // update Workflow by id
  rpc Update (UpdateRequest) returns (UpdateWorkflowResponse) {}

  // delete Workflow by id
  rpc Delete (DeleteWorkflowRequest) returns (DeleteWorkflowResponse) {}

  // create trugger by id
  rpc Create (CreateWorkflowRequest) returns (CreateWorkflowResponse) {}

  // activate workflow
  rpc ActivateWorkflow(ActivateWorkflowRequest) returns (ActivateWorkflowResponse) {}
}

// ------------ AppActions Service -------------
service AppActions {
  // list of AppActions
  rpc List (ListAppActionRequest) returns (ListAppActionResponse) {}

  // get AppAction by id
  rpc Get (GetAppActionRequest) returns (GetAppActionResponse) {}

  // update AppAction by id
  rpc Update (UpdateRequest) returns (UpdateAppActionResponse) {}

  // delete AppAction by id
  rpc Delete (DeleteAppActionRequest) returns (DeleteAppActionResponse) {}

  // create trugger by id
  rpc Create (CreateAppActionRequest) returns (CreateAppActionResponse) {}
}

// ------------ Versions Service -------------
service Versions {
  // list of Versions
  rpc List (ListVersionRequest) returns (ListVersionResponse) {}

  // get Versions by id
  rpc Get (GetVersionRequest) returns (GetVersionResponse) {}

  // update Versions by id
  rpc Update (UpdateRequest) returns (UpdateVersionResponse) {}

  // delete Versions by id
  rpc Delete (DeleteVersionRequest) returns (DeleteVersionResponse) {}

  // create Versions by id
  rpc Create (CreateVersionRequest) returns (CreateVersionResponse) {}
}

// ------------ Translations Service -------------
service Translations {
  // list of Translations
  rpc List (ListTranslationRequest) returns (ListTranslationResponse) {}

  // get Translation by id
  rpc Get (GetTranslationRequest) returns (GetTranslationResponse) {}

  // update Translation by id
  rpc Update (UpdateRequest) returns (UpdateTranslationResponse) {}

  // delete Translation by id
  rpc Delete (DeleteTranslationRequest) returns (DeleteTranslationResponse) {}

  // create trugger by id
  rpc Create (CreateTranslationRequest) returns (CreateTranslationResponse) {}
}

// ------------ Enums -------------
enum Vendor {
  vendor_default = 0;
  GCP = 1;
  AWS = 2;
  AZURE = 3;
  ONPREM = 4;
}

enum BotLang {
  botlang_default = 0;
  EN = 1;
  ES = 2;
  FR = 3;
  GR = 4;
  INHERIT = 5;
  PT = 6;
}

// ------------ Messages -------------
// empty data
message Empty {}

// Firestore timestamp
message Timestamp {

  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

// firestore collection query
message ColQuery {
  repeated bytes conditions = 1;
}

// request for update
message UpdateRequest {
  // object id
  string id = 1;

  // the object to update
  oneof data {
    User user = 2;
    Org org = 3;
    Webhook webhook = 4;
    Workflow workflow = 5;
    App app = 6;
    Trigger trigger = 7;
    Operation operation = 8;
    AppAction app_action = 9;
    Translation translation = 10;
    Version version = 11;
  }

  // ignore flatten function
  bool ignore_flatten = 12;

  // override record
  bool override = 13;
}

// object id message
message ObjectId {
  string id = 1;
}

// define hubspot object
message HubSpot {
  string api_key = 1;
}

// define the auth object
message Auth {
  // user's password hash
  string password = 1;

  // otp seed
  string seed = 2;

  // access level between 10 and 30
  uint32 access_level = 3;
}

// define the mailing list
message MailingList {
  repeated string values = 1;
}

// describe a user
message User {
  // user's first name
  string first_name = 1;

  // user's last name
  string last_name = 2;

  // list of mobile numbers
  repeated string mobiles = 3;

  // list of emails
  repeated string emails = 4;

  // list of orgs ids
  repeated string orgs = 5;

  // timestamp of document creation
  Timestamp create_timestamp = 6;

  // timestamp of last document update
  Timestamp update_timestamp = 7;

  // timestamp of last activity by the current user
  Timestamp last_seen_timestamp = 8;

  // auth details object
  Auth auth = 9;

  // bot lang
  BotLang bot_lang = 10;

  // user's id
  string id = 11;

  // firestore path
  string path = 12;

  // mobiles country code
  string mobiles_country_code = 13;

  // salesforce refresh token
  map<string, string> salesforce = 14;

  // hubspot refresh token
  map<string, string> hubspot = 15;

  // mailing refresh token
  map<string, MailingList> mailing = 16;

  // console lang
  string console_lang = 17;

  // zapier integrations
  map<string, string> zapier = 18;

  // user workflows
  map<string, bool> workflows = 19;
}

// describe an org
message Org {
  // name of the organization
  string name = 1;

  // current releai version
  string releai_version = 2;

  // define the vendor for the org
  Vendor vendor = 3;

  // hubspot description
  HubSpot hubspot = 4;

  // timestamp of document creation
  Timestamp create_timestamp = 6;

  // timestamp of last document update
  Timestamp update_timestamp = 7;

  // org's id
  string id = 8;

  // firestore path
  string path = 9;

  // tos
  bool tos = 10;

  // policy
  bool privacy = 11;

  // clara number
  string clara_number = 12;

  // bot lang
  BotLang bot_lang = 13;

  // trial days
  int32 trail_days = 14;

  // payment subscription
  string subscription = 15;

  // zapier integrations
  map<string, string> zapier = 16;

  // build config
  ConfigBuild config_build = 17;

  // org workflows
  map<string, bool> workflows = 18;
}

// describes the users list response
message UsersList {
  // returns list of users
  repeated User users = 1;
}

// describes the orgs list response
message OrgsList {
  // returns list of orgs
  repeated Org orgs = 1;
}

// remove integration request
message RemoveIntegrationRequest {
  string org_id = 1;
  string integration_type = 2;
  string user_id = 3;
  string integration_level = 4;
}

// remove integration response
message RemoveIntegrationResponse {
  bool done = 1;
}

message RemoveSubscriptionRequest {
  string id = 1;
}

message RemoveSubscriptionResponse {
  string id = 1;
}

// list of webhooks
message WebhooksList {
  repeated Webhook webhooks = 1;
}

// message webhook
message Webhook {
  // org id related to webhook
  string org_id = 1;

  // user id related to webhook
  string user_id = 2;

  // target url related to webhook
  string target_url = 3;

  // is webhook is on org level
  bool is_org_webhook = 4;

  // timestamp of document creation
  Timestamp create_timestamp = 5;

  // timestamp of last document update
  Timestamp update_timestamp = 6;

  // timestamp of last activity by the current user
  Timestamp last_seen_timestamp = 7;

  // firestore id
  string id = 9;

  // firestore path
  string path = 10;
}

// message UpdateWebhooksArrayRequest
message UpdateWebhooksArrayRequest {
  string user_id = 1;
  string webhook_id = 2;
  string operation = 3;
  string org_id = 4;
}

// message TriggersList
message TriggersList {
  repeated Trigger triggers = 1;
}

// message Trigger
message Trigger {
  string id = 1;
  string system = 2;
  string trigger_type = 3;
  TriggerPayload payload = 4;
}

// message TriggerPayload
message TriggerPayload {
  string number = 1;
}

// message AppsList
message AppsList {
  repeated App apps = 1;
}

// message GetAppRequest
message GetAppRequest {
  string id = 1;
}

// message App
message App {
  string id = 1;
  string system_key = 2;
  string api_key = 3;
  string base_url = 4;
  string protocol = 5;
  bool approved = 6;
  map<string, string> display_name = 7;
  AppRequest request = 8;
  bool tls = 9;
  string version = 10;
}

// // message AppActionMetadata
// message AppActionMetadata {
//   map<string, bool> metadata = 1;
// }

// message AppRequest
message AppRequest {
  map<string, OperationPayload> headers = 1;
  map<string, OperationPayload> query = 2;
  map<string, OperationPayload> body = 3;
}

// message ConfigBuild
message ConfigBuild {
  bool is_completed = 1;
  int64 timestamp = 2;
}

// message OperationsList
message OperationsList {
  repeated Operation operations = 1;
}

// message Operation
message Operation {
  string app_id = 1;
  OperationAction action = 2;
  bool is_root = 3;
  OperationRedis redis = 4;
  map<string, OperationPayload> payload = 5;
  OperationOutput output = 6;
  repeated string workflows = 7;
  map<string, string> next_operation = 8;
  OperationInput input = 9;
  string key = 10;
  string id = 11;
  map<string, string> on_error = 12;
  string version = 13;
}

// message OperationRedis
message OperationRedis {
  string field = 1;
  string type = 2;
}

// message OperationPayload
message OperationPayload {
  google.protobuf.Value data = 1;
  string type = 2;
  string rkey_type = 3;
  map<string, OperationPayload> vars = 4;
  map<string, string> next_operation = 5;
  string match_operation = 6;
  OperationPayload default = 7;
}

// message AppRequestPayload
message AppRequestPayload {
  string data = 1;
  string type = 2;
  string rkey_type = 3;
  map<string, AppRequestPayload> vars = 4;
}

// message OperationOutput
message OperationOutput {
  repeated FormatFunctionObj format_function = 1;
  repeated RedisFunctionsObj redis_functions = 2;
  string operation_type = 3;
}

// message OperationInput
message OperationInput {
  repeated FormatFunctionObj format_function = 1;
  repeated RedisFunctionsObj redis_functions = 2;
}

// message FormatFunctionObj
message FormatFunctionObj {
  string operation = 1;
  string output = 2;
  OperationPayload value = 3;
  FormatFunctionArgs args = 4;
}

// message FormatFunctionArgs
message FormatFunctionArgs {
  int32 amount = 1;
}

// message RedisFunctionsObj
message RedisFunctionsObj {
  string operation = 1;
  string path = 2;
  OperationPayload value = 3;
  string type = 4;
}

// message OperationAction
message OperationAction {
  string id = 1;
  string type = 2;
}

// message WorkflowsList
message WorkflowsList {
  repeated Workflow workflows = 1;
}

// message Workflow
message Workflow {
  string organization_id = 1;
  ConfigBuild config_build = 2;
  WorkflowMatch match = 3;
  map<string, string> display_name = 7;
  string key = 8;
  string id = 9;
  string version = 10;
}

// message WorkflowMatch
message WorkflowMatch {
  string callback = 1;
  string input = 2;
  string payload = 3;
  int32 weight = 4;
}

// message AppAction
message AppAction {
  string operation_key = 1;
  string uri = 2;
  AppActionRequest request = 3;
  map<string, string> display_name = 4;
  string app_id = 5;
  map<string, bool> metadata = 6;
  string id = 7;
  string version = 8;
}

// message AppActionRequest
message AppActionRequest {
  string method = 1;
  map<string,OperationPayload> headers = 2;
  map<string,OperationPayload> body = 3;
  map<string,OperationPayload> query = 4;
}

// load app keys request message
message LoadAppKeysRequest {}

// load app keys response message
message LoadAppKeysResponse {
  // if the app document was added
  // removed or modified
  string change_type = 1;

  // the application id
  string app_id = 2;

  // the api key
  string api_key = 3;
}

// message GetAppActionRequest
message GetAppActionRequest {
  string id = 1;
}

// message GetAppActionResponse
message GetAppActionResponse {
  AppAction app_action = 1;
}

// message ListAppActionRequest
message ListAppActionRequest {
  repeated bytes conditions = 1;
}

// message ListAppActionResponse
message ListAppActionResponse {
  repeated AppAction app_actions = 1;
}

message CreateAppActionRequest {
  AppAction app_action = 1;
}

message CreateAppActionResponse {
  string id = 1;
}

message UpdateAppActionResponse {
  string id = 1;
}

message DeleteAppActionRequest {
  string id = 1;
}

message DeleteAppActionResponse {}

message GetWorkflowRequest {
  string id = 1;
}

message GetWorkflowResponse {
  Workflow workflow = 1;
}

message ListWorkflowRequest {
  repeated bytes conditions = 1;
}
message ListWorkflowResponse {
  repeated Workflow workflows = 1;
}

message CreateWorkflowRequest {
  Workflow workflow = 1;
}

message CreateWorkflowResponse {
  string id = 1;
}

message UpdateWorkflowResponse {
  string id = 1;
}

message DeleteWorkflowRequest {
  string id = 1;
}

message DeleteWorkflowResponse {}

message GetOperationRequest {
  string id = 1;
}

message GetOperationResponse {
  Operation operation = 1;
}

message ListOperationRequest {
  repeated bytes conditions = 1;
}

message ListOperationResponse {
  repeated Operation operations = 1;
}

message CreateOperationRequest {
  Operation operation = 1;
}

message CreateOperationResponse {
  string id = 1;
}

message UpdateOperationResponse {
  string id = 1;
}

message DeleteOperationRequest {
  string id = 1;
}

message DeleteOperationResponse {}

message GetAppResponse {
  App app = 1;
}

message ListAppRequest {
  repeated bytes conditions = 1;
}

message ListAppResponse {
  repeated App apps = 1;
}

message CreateAppRequest {
  App app = 1;
}

message CreateAppResponse {
  string id = 1;
}

message UpdateAppResponse {
  string id = 1;
}

message DeleteAppRequest {
  string id = 1;
}

message DeleteAppResponse {}

message ListTriggerRequest {
  repeated bytes conditions = 1;
}

message ListTriggerResponse {
  repeated Trigger triggers = 1;
}

message GetTriggerRequest {
  string id = 1;
}

message GetTriggerResponse {
  Trigger trigger = 1;
}

message CreateTriggerRequest {
  Trigger trigger = 1;
}

message CreateTriggerResponse {
  string id = 1;
}

message UpdateTriggerResponse {
  string id = 1;
}

message DeleteTriggerRequest {
  string id = 1;
}

message DeleteTriggerResponse {}

message ListWebhookRequest {
  repeated bytes conditions = 1;
}

message ListWebhookResponse {
  repeated Webhook webhooks = 1;
}

message GetWebhookRequest {
  string id = 1;
}

message GetWebhookResponse {
  Webhook webhook = 1;
}

message UpdateWebhookResponse {
  string id = 1;
}

message DeleteWebhookResponse {}

message DeleteWebhookRequest {
  string id = 1;
}

message CreateWebhookRequest {
  Webhook webhook = 1;
}

message CreateWebhookResponse {
  string id = 1;
}

message ListUserRequest {
  repeated bytes conditions = 1;
}

message ListUserResponse {
  repeated User users = 1;
}

message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserResponse {
  string id = 1;
}

message DeleteUserResponse {}

message DeleteUserRequest {
  string id = 1;
}

message CreateUserRequest {
  User user = 1;
}

message CreateUserResponse {
  string id = 1;
}

message ListOrgRequest {
  repeated bytes conditions = 1;
}

message ListOrgResponse {
  repeated Org orgs = 1;
}

message GetOrgRequest {
  string id = 1;
}

message GetOrgResponse {
  Org org = 1;
}

message UpdateOrgResponse {
  string id = 1;
}

message DeleteOrgResponse {}

message DeleteOrgRequest {
  string id = 1;
}

message CreateOrgRequest {
  Org org = 1;
}

message CreateOrgResponse {
  string id = 1;
}

// message DeleteCompanyRequest
message DeleteCompanyRequest {
  string org_id = 1;
}

// message DeleteCompanyResponse
message DeleteCompanyResponse {
  bool deleted = 1;
}

// message DeleteUserWithAuthRequest
message DeleteUserWithAuthRequest {
  string uid = 1;
  string user_fs_id = 2;
}

message DeleteUserWithAuthResponse {
  bool deleted = 1;
}

// translations requests service
message ListTranslationRequest {
  repeated bytes conditions = 1;
}

message ListTranslationResponse {
  repeated Translation translations = 1;
}

message GetTranslationRequest {
  string id = 1;
}

message GetTranslationResponse {
  Translation translation = 1;
}

message UpdateTranslationResponse {
  string id = 1;
}

message DeleteTranslationRequest {
  string id = 1;
}

message DeleteTranslationResponse {}

message CreateTranslationRequest {
  Translation translation = 1;
}

message CreateTranslationResponse {
  string id = 1;
}

// Translation message
message Translation {
  string key = 1;
  string lang = 2;
  string value = 3;
  string id = 4;
  string version = 5;
}

// message CreateOperationsRequest
message CreateOperationsRequest {
  repeated Operation records = 1;
}

// message CreateOperationsResponse
message CreateOperationsResponse {
  repeated string ids = 1;
}

// message ListVersionRequest
message ListVersionRequest {
  repeated bytes conditions = 1;
}

// message ListVersionResponse
message ListVersionResponse {
  repeated Version versions = 1;
}

// message GetVersionRequest
message GetVersionRequest {
  string id = 1;
}

// message GetVersionResponse
message GetVersionResponse {
  Version version = 1;
}

// message UpdateVersionResponse
message UpdateVersionResponse {
  string id = 1;
}

// message DeleteVersionRequest
message DeleteVersionRequest {
  string id = 1;
}

// message DeleteVersionResponse
message DeleteVersionResponse {}

// message CreateVersionRequest
message CreateVersionRequest {
  Version version = 1;
}

// message CreateVersionResponse
message CreateVersionResponse {
  string id = 1;
}

// message Version
message Version {
  string key = 1;
  string id = 2;
}

// message ActivateWorkflowRequest
message ActivateWorkflowRequest {
  ActivateWorkflowObject user = 1;
  ActivateWorkflowObject org = 2;
}

// message ActivateWorkflowResponse
message ActivateWorkflowResponse {
  bool updated = 1;
}

// message ActivateWorkflowObject
message ActivateWorkflowObject {
  repeated string append = 1;
  repeated string remove = 2;
}